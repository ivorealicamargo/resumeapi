from langchain_openai.chat_models import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.schema.output_parser import BaseOutputParser
from langchain_core.runnables import Runnable
from typing import Dict


class ResumeOutputParser(BaseOutputParser):
    """
    A custom parser for structuring the output from a language model into a JSON format.

    This parser processes the response from the LLM and extracts:
    - Candidate's full name.
    - Professional introduction (in third person).
    - A list of skills.

    Attributes:
        None.
    """

    def parse(self, text: str) -> Dict[str, object]:
        """
        Parses the language model's output into a structured dictionary.

        Args:
            text (str): The raw response text generated by the language model.

        Returns:
            Dict[str, object]: A dictionary containing the following keys:
                - "candidate_name" (str): Extracted candidate's full name.
                - "professional_intro" (str): A rewritten professional introduction
                  in the third person.
                - "skills" (list[str]): A list of skills extracted from the resume.
        """
        lines = text.strip().split("\n")
        print(f"Lines: {lines}")

        candidate_name = lines[0].strip()
        professional_intro = lines[1].strip()

        skills_start_index = 2
        skills_raw = " ".join(
            line.strip("[]") for line in lines[skills_start_index:] if line.strip()
        )

        skills = [skill.strip().strip('"') for skill in skills_raw.split(",")]

        return {
            "candidate_name": candidate_name,
            "professional_intro": professional_intro,
            "skills": skills,
        }


def create_resume_chain() -> Runnable:
    """
    Creates a LangChain pipeline to extract resume information using a language model.

    The pipeline processes a given resume text and extracts:
    - Candidate's full name.
    - A rewritten professional introduction (in third person).
    - A list of skills relevant to the candidate.

    Returns:
        object: A LangChain pipeline object combining the prompt, LLM, and custom parser.
    """
    llm = ChatOpenAI(model="gpt-4", temperature=0)
    prompt = PromptTemplate.from_template(
        """
        Here is the text of a resume:
        {resume_text}

        Extract the following information without including any numbering, parentheses,
        or extraneous characters in your output:

        - Candidate's Full Name
        - Professional Introduction (rewrite in the third person)
        - Skills (list only relevant technical skills, such as programming languages, tools, frameworks)


        Output example:

            John Doe
            A results-driven software engineer with expertise in web development for 15 years ...
            [Python, JavaScript, React, Django, AWS, SQL, Cypher, ...]

        Ensure your output follows this format exactly and does not include irrelevant symbols
        or unnecessary text.
        """
    )
    return prompt | llm | ResumeOutputParser()
